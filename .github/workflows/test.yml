name: Test
on:
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        if: github.event.inputs.git-ref == ''

      - name: Check out repository with specific ref
        uses: actions/checkout@v3
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Lint with flake8
        run: |
          # stop the action if there are syntax errors or undefined variables
          poetry run flake8 . --max-line-length=88 --extend-exclude=.venv,venv --select=E9,F63,F7,F82
          # treat all errors as warnings
          poetry run flake8 . --max-line-length=88 --extend-exclude=.venv,venv --count --exit-zero --max-complexity=10 --statistics

      - name: Run mypy
        run: poetry run mypy gradient_metrics

      - name: Run Tests with pytest
        run: poetry run pytest --cov=gradient_metrics/ --cov-report=term-missing --cov-fail-under=90 tests

      - name: Build the package
        run: poetry build
